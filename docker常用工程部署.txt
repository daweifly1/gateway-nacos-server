

#下载镜像
docker pull 10.100.2.92:5000/parts/nginx
docker pull 10.100.2.92:5000/parts/vsftpd

#运行个nginx，copy配置使用
docker run -d -p 8083:80 --name nginx-test -d 10.100.2.92:5000/parts/nginx

mkdir -p /data/docker/nginx/conf
mkdir -p  /data/docker/nginx/conf/conf.d

#copy nginx 配置（先查ps）
docker cp 998042a5c8bc:/etc/nginx/nginx.conf  /data/docker/nginx/conf
docker cp 998042a5c8bc:/etc/nginx/conf.d/default.conf  /data/docker/nginx/conf/conf.d

修改 /data/docker/nginx/conf/nginx.conf     “user  root;”

#运行将要使用的nginx
docker run -d -p 8084:80 --name parts-nginx-web -v /data/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro -v /data/docker/nginx/conf/conf.d:/etc/nginx/conf.d:ro  -v /data/docker/nginx/html:/usr/share/nginx/html:rw -v/data/docker/nginx/logs:/var/log/nginx -d       10.100.2.92:5000/parts/nginx

#运行ftp服务
docker run -d -p 21:21 -p 20:20 -p 21100-21110:21100-21110 -v /data/docker/nginx:/home/vsftpd -e FTP_USER=html -e FTP_PASS=pssword -e PASV_ADDRESS=192.168.99.2 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always 10.100.2.92:5000/parts/vsftpd


#停止删除测试nginx容器
docker stop 998042a5c8bc
docker rm 998042a5c8bc


docker run -d -v /home/jars/logs/:/home/logs --name parts-storage  --expose=9004 -p 9004:9004  -p 90040:90040  -e "EUREKA_INSTANCE_IP-ADDRESS=10.100.2.109" -e "SERVER_PORT=9004" parts-storage:latest





#fastdfs
docker run -d --network=host --name trakcer -v /home/fdfs/tracker_data:/fastdfs/tracker/data  season/fastdfs tracker
#netstat -aon | grep 22122

docker run -d --network=host --name storage -e TRACKER_SERVER=10.100.2.109:22122 -v /home/fdfs/storage:/fastdfs/store_path -e GROUP_NAME=group1 season/fastdfs storage


docker cp storage:/fdfs_conf/storage.conf ~/
修改后
docker cp ~/storage.conf storage:/fdfs_conf/
docker stop storage
docker start storage

docker exec -it storage bash
cd fdfs_conf
fdfs_monitor storage.conf

在docker模拟客户端上传文件到storage容器
docker run -tid --name fdfs_sh --net=host season/fastdfs sh





#docker 安装mysql8
docker run -d -v /home/docker-mysql/:/var/lib/mysql -p 3306:3306 --name parts -e MYSQL_ROOT_PASSWORD=123456 mysql

#docker 安装rabbitMq
docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 rabbitmq:management
备选启动同时设置用户和密码
docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management


#docker 安装eureka_g_
docker run -d -p 18100:18100 --name  eureka_g  eureka_g:v1.0

#docker 安装config-server
docker run -d --name config-server --expose=18101 -p 18101:18101 -e "EUREKA_INSTANCE_IP-ADDRESS=10.100.2.109" -e "SERVER_PORT=18101" config-server:v1.0




#docker auth-server
docker run -d -v /home/jars/logs/:/home/logs --name auth-server  --expose=17003 -p 17003:17003  -e "EUREKA_INSTANCE_IP-ADDRESS=10.100.2.109" -e "SERVER_PORT=17003"  auth-server:v1.0



docker run -d -v /home/jars/logs/:/home/logs --name  gw-oauth-server  --expose=9000 -p 9000:9000  -e "EUREKA_INSTANCE_IP-ADDRESS=10.100.2.109" -e "SERVER_PORT=9000"  gw-oauth-server:v2.0


docker run -d --name  gw-oauth-client  --expose=9001 -p 9001:9001  -e "EUREKA_INSTANCE_IP-ADDRESS=10.100.2.109" -e "SERVER_PORT=9001" oauth-client:v1.0







使用Docker安装Kong
1.
docker network create kong-net 
2.
docker run -d --name kong-database --network=kong-net \
-p 5432:5432 \
-e "POSTGRES_USER=kong" \
-e "POSTGRES_DB=kong" postgres:9.6 
3.
docker run --rm     --network=kong-net     -e "KONG_DATABASE=postgres"     -e "KONG_PG_HOST=kong-database"     -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database"     kong:0.13.1-centos  kong migrations bootstrap

docker run --rm     --network=kong-net     -e "KONG_DATABASE=postgres"     -e "KONG_PG_HOST=kong-database"     -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database"     kong:0.13.1-centos  kong migrations up

4.
docker run -d --name kong \
    --network=kong-net \
    -e "KONG_DATABASE=postgres" \
    -e "KONG_PG_HOST=kong-database" \
    -e "KONG_CASSANDRA_CONTACT_POINTS=kong-database" \
    -e "KONG_PROXY_ACCESS_LOG=/dev/stdout" \
    -e "KONG_ADMIN_ACCESS_LOG=/dev/stdout" \
    -e "KONG_PROXY_ERROR_LOG=/dev/stderr" \
    -e "KONG_ADMIN_ERROR_LOG=/dev/stderr" \
    -e "KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl" \
    -p 8000:8000 \
    -p 8443:8443 \
    -p 8001:8001 \
    -p 8444:8444 \
    kong:0.13.1-centos
	
5.
docker run -d --name kong-dashboard \
    --network=kong-net \
    --link kong:kong \
    -p 9080:8080 \
    pgbi/kong-dashboard:v2 


http://10.100.2.109:8000/cc

在Kong0.13.0版本以前，有API对象，但是从0.13.0之后开始逐步抛弃API对象，使用路由和服务组合来取代API对象，这提高了Kong的灵活性。基于此本文也将不介绍有关API对象的操作



显示docker中的ip
docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)






https://github.com/daweifly1/xgit-parts-pom.git


计划目标
1.预留版本 dev_20190618_a1 功能登录（非security）、鉴权(security)、社交登录（仅github）、动态配置（bus,缺配置调试）

2.计划开发：
oauth2 授权服务 jwt非对称加密方式




String s="eyJhbGciOiJIUzUxMiJ9.eyJzdWJqZWN0Ijoie1wiYWNjb3VudE5vbkV4cGlyZWRcIjp0cnVlLFwiYWNjb3VudE5vbkxvY2tlZFwiOnRydWUsXCJhdXRob3JpdGllc1wiOlt7XCJhdXRob3JpdHlcIjpcIlVTRVJcIn1dLFwiYmFzZVVzZXJcIjp7XCJpZFwiOjMsXCJuYW1lXCI6XCLnrqHnkIblkZhcIixcInJvbGVJZHNcIjpbMV0sXCJ1c2VybmFtZVwiOlwiYWRtaW5cIn0sXCJjcmVkZW50aWFsc05vbkV4cGlyZWRcIjp0cnVlLFwiZW5hYmxlZFwiOnRydWUsXCJ1c2VyXCI6e1wiYWNjb3VudE5vbkV4cGlyZWRcIjp0cnVlLFwiYWNjb3VudE5vbkxvY2tlZFwiOnRydWUsXCJhdXRob3JpdGllc1wiOlt7XCJhdXRob3JpdHlcIjpcIlVTRVJcIn1dLFwiY3JlZGVudGlhbHNOb25FeHBpcmVkXCI6dHJ1ZSxcImVuYWJsZWRcIjp0cnVlLFwidXNlcm5hbWVcIjpcImFkbWluXCJ9LFwidXNlcm5hbWVcIjpcImFkbWluXCJ9IiwieGd4eERldiI6MTU2MTUyNTQyNzM2NywiZXhwIjoxNTYxNTI2NjI3fQ.U0pN0MX6MhXP5WNo1isro1Qs5_se2XYi4chtDnoqRs-zEI5GeKeZxcYwVSzF_Gi2BC62GG_sKS2Mg-0ch3fINg";



70d8fe6c449033318dcf5047705b061673216df7c009349c760ed7cf9b83dd28466432aba3832078e0a6aff0b86b5c0c92aad6619c1ff20772a2359128c5479b6fb31b9ee09d6a10dd752643e603abac6f1feadf238bc6d0622bd0e5c20847229908fb5cbf8900a868d0fa8ab28084fd9682ae3fa32b22cc041220eec0a24c837cccc43a67c1b67b9682ae3fa32b22ccab27937fce929be5c7d19cccf3ff12628b6c8c981665e8d24d50fdbdaafe2a41c9b7b6385e9b3099fe6c7d0f20f753f31882ece6dd25c06d5b9ac8452c92e5d56fdb7061ecc764acf3a49bc9c08526ea79a98e46c2483c7109258e639fc2342b92bc8dcc882e96611cb77aa18abdf8be1e0aad288bd1efb92dd08e0cb11bf5b6bee7527b69de5fbcf3d397fba861578dcb64185a23e1f72b86d2232294bbb6a972a2359128c5479b6fb31b9ee09d6a10c270aad8a2bdaa9ce1c530ed66cd7a369b369dc55f0f1fbd1cb77aa18abdf8bed91715b6c76e59f7e0a6aff0b86b5c0c92aad6619c1ff20772a2359128c5479b6fb31b9ee09d6a10dd752643e603abac6f1feadf238bc6d0622bd0e5c20847229908fb5cbf8900a868d0fa8ab28084fd9682ae3fa32b22cc041220eec0a24c837cccc43a67c1b67b9682ae3fa32b22ccab27937fce929be5c7d19cccf3ff12628b6c8c981665e8d29b698becfa1d2b797a831b0dd76901429cd13a2c547f9a47ff23a850dc3fd1e40e92a32b764e41541eb3ec4c48b5cc6b6a3d6f402c4c166325557de8cf59dda63461fa7a43679d9b935b0fed82716de8674ca4810b3013d8b92dc4e9f927d5823461fa7a43679d9b935b0fed82716de8674ca4810b3013d80ede5d17f1db8412c387dcd5b91e7cf1ec0032daaedcf340c6f5cee41236eff00423552a6188b99b06d8ff13a0b3fc84f56e596608cceb6a87087dc99a650ea624b8f2b6679350e6f008788844cec22afcb482a60bf391304436e8dc773f120570518bef69120816e8115f9adb50817557f883237d300a2267addf42767b98008348fff85b069e59c58adf841a98d21949b94c3ae026107a






AB4mf17BMnZSUXWF4bKksA==

				


